#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

template <typename T>
using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define endl "\n";
typedef long long ll;
typedef vector<int> vi;

const int maxNode = 2e5 + 9, inf = -1e9 + 7;
int a[maxNode];
struct ST
{
#define lc (n << 1)
#define rc ((n << 1) | 1)
    long long t[4 * maxNode], lazy[4 * maxNode], ass[4 * maxNode];
    ST()
    {
        memset(t, 0, sizeof t);
        memset(lazy, 0, sizeof lazy);
        memset(ass, -1, sizeof ass);
    }
    inline void push(int n, int b, int e)
    {
        if (lazy[n] == 0 and ass[n] == -1)
            return;

        if (ass[n] != -1)
        {

            t[n] = ass[n] * (e - b + 1);
            if (b != e)
            {
                lazy[lc] = lazy[rc] = 0;
                ass[lc] = ass[n];
                ass[rc] = ass[n];
            }
            ass[n] = -1;
        }
        // if ass[n]==-1 , so lazy would be applied....
        t[n] = t[n] + lazy[n] * (e - b + 1);
        if (b != e) // not a leaf node ... so pass the lazy value to the children
        {
            lazy[lc] = lazy[lc] + lazy[n];
            lazy[rc] = lazy[rc] + lazy[n];
        }
        lazy[n] = 0;
        ass[n] = -1;
    }
    inline long long combine(long long a, long long b)
    {

        return a + b;
    }
    inline void pull(int n)
    {
        t[n] = combine(t[lc], t[rc]);
    }
    void build(int n, int b, int e)
    {
        lazy[n] = 0;
        ass[n] = -1;
        if (b == e)
        {
            t[n] = a[b];
            return;
        }
        int mid = (b + e) >> 1;
        build(lc, b, mid);
        build(rc, mid + 1, e);
        pull(n);
    }

    void rangeAssign(int n, int b, int e, int i, int j, long long v)
    {
        push(n, b, e); // here push indicates to pass the lazy or the assign values to the children...
        if (j < b || e < i)
            return;
        if (i <= b && e <= j)
        {
            lazy[n] = 0; // set lazy
            ass[n] = v;  // set the assign value..
            // t[n] = v * (e - b + 1);
            push(n, b, e);
            return;
        }
        int mid = (b + e) >> 1;
        rangeAssign(lc, b, mid, i, j, v);
        rangeAssign(rc, mid + 1, e, i, j, v);

        pull(n);
    }

    void upd(int n, int b, int e, int i, int j, long long v)
    {
        push(n, b, e); // here push indicates to pass the lazy or the assign values to the children...
        if (j < b || e < i)
            return;
        if (i <= b && e <= j)
        {
            lazy[n] += v; // set lazy
            // t[n] += lazy[n] * (e - b + 1);
            push(n, b, e);
            return;
        }
        int mid = (b + e) >> 1;
        upd(lc, b, mid, i, j, v);
        upd(rc, mid + 1, e, i, j, v);
        pull(n);
    }

    long long query(int n, int b, int e, int i, int j)
    {
        push(n, b, e);
        if (i > e || b > j)
            return 0; // return null
        if (i <= b && e <= j)
            return t[n];
        int mid = (b + e) >> 1;
        return combine(query(lc, b, mid, i, j), query(rc, mid + 1, e, i, j));
    }

} seg;

void solve()
{
    int n, q;
    cin >> n >> q;
    for (int i = 1; i <= n; i++)
        cin >> a[i];
    seg.build(1, 1, n);
    while (q--)
    {
        int ty;
        cin >> ty;
        if (ty == 1)
        {
            int a, b, u;
            cin >> a >> b >> u;
            seg.upd(1, 1, n, a, b, u);
        }
        else if (ty == 2)
        {
            int a, b, x;
            cin >> a >> b >> x;
            seg.rangeAssign(1, 1, n, a, b, x);
        }
        else
        {
            int l, r;
            cin >> l >> r;
            cout << seg.query(1, 1, n, l, r) << endl;
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1, cs = 1;
    // cin >> t;
    while (t--)
    {
        // cout<<"Case "<<cs++<<": ";
        solve();
    }
    return 0;
}

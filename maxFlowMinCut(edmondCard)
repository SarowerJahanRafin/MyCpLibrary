// https : // cses.fi/problemset/task/1694/

#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

using namespace std;
// using namespace __gnu_pbds;

// #pragma comment(linker, "/stack:200000000")
// #pragma GCC optimize("Ofast")
// #pragma GCC optimization ("unroll-loops")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<long long, long long> pii;
typedef pair<ll, ll> pll;

#define un(x) x.erase(unique(all(x)), x.end())
#define xx first
#define yy second
#define pb push_back
#define all(v) v.begin(), v.end()

#define D(x) cerr << #x " = " << x << '\n'
#define DBG cerr << "Hi!" << '\n'

#define CLR(a) memset(a, 0, sizeof(a))
#define SET(a) memset(a, -1, sizeof(a))

// inline long long setBit(long long n,long long pos) { return n = n | (1 << pos); }
// inline long long resetBit(long long n,long long pos) { return n = n & ~(1 << pos); }
// inline bool checkBit(long long n,long long pos) { return (bool)(n & (1 << pos)); }
// inline long long countBit(ll n) { return __builtin_popcountll(n); }

// long long fx[] = {+0, +0, +1, -1, -1, +1, -1, +1};
// long long fy[] = {-1, +1, +0, +0, +1, +1, -1, -1}; //Four & Eight Direction

// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// unsigned long long num = rng();
// shuffle(V.begin(),V.end(),rng);

/******************************************************************************************/

// const long long MAX = 500010;
// const long long INF = 0x3f3f3f3f;
// const double inf = 1.0/0.0;
// const long long MOD = 1000000007;
// inline long long add(long long a,long long b) { return (a + 0LL + b) % MOD; }
// inline long long mul(long long a,long long b) { return (a * 1LL * b) % MOD; }

/***
 * Edmonds Carp Algorithm
 * Finds Max Flow using ford fulkerson method
 * Finds path from source to sink using bfs
 * Complexity V*E*E
 ***/

const long long N = 1003, INF = 1e9 + 7;
const long long MAX = N;

vector<long long> adj[MAX];
long long cap[MAX][MAX];
long long par[MAX];  /// keeps track of the parent in a path from s to d
long long mCap[MAX]; /// mCap[i] keeps track edge that have minimum cost on the shortest path from s to i

bool getPath(long long s, long long d, long long n)
{
    for (long long i = 0; i <= n; i++)
        mCap[i] = INF;
    SET(par);
    queue<long long> q;
    q.push(s);
    while (!q.empty())
    {
        long long u = q.front();
        q.pop();
        for (long long i = 0; i < adj[u].size(); i++)
        {
            if (cap[u][adj[u][i]] != 0 && par[adj[u][i]] == -1)
            {
                par[adj[u][i]] = u;
                mCap[adj[u][i]] = min(mCap[u], cap[u][adj[u][i]]);
                if (adj[u][i] == d)
                    return true;
                q.push(adj[u][i]);
            }
        }
    }
    return false;
}

long long getFlow(long long s, long long d, long long n)
{
    long long F = 0;
    while (getPath(s, d, n))
    {
        long long f = mCap[d];
        F += f;
        long long u = d;
        while (u != s)
        {
            long long v = par[u];
            cap[u][v] += f;
            cap[v][u] -= f;
            u = v;
        }
    }
    return F;
}

int main()
{
    //    freopen("in.txt","r",stdin);
    //    freopen("out.txt","w",stdout);

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    long long n, m;
    cin >> n >> m;
    while (m--)
    {
        long long u, v, w;
        cin >> u >> v >> w;
        cap[u][v] += w;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    long long maxFlow = getFlow(1, n, n);
    cout << maxFlow << endl;
    return 0;
}

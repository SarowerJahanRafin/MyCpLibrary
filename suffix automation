#include <bits/stdc++.h>
using namespace std;

const int N = 3e5 + 9;
typedef long long ll;
// len -> largest string length of the corresponding endpos-equivalent class
// link -> longest suffix that is another endpos-equivalent class.
// firstpos -> 1 indexed end position of the first occurrence of the largest string of that node
// minlen(v) -> smallest string of node v = len(link(v)) + 1
// terminal nodes -> store the suffixes
struct SuffixAutomaton
{
    struct node
    {
        int len, link, firstpos;
        map<char, int> nxt;
    };
    int sz, last;
    vector<node> t; // it would contain all the nodes .... starting from 0 which is the root
    vector<int> terminal;
    vector<long long> dp;
    vector<vector<int>> adj;
    vector<ll> disSubstr;
    SuffixAutomaton() {}
    SuffixAutomaton(int n)
    {
        t.resize(2 * n);
        terminal.resize(2 * n, 0);
        dp.resize(2 * n, -1);
        sz = 1;
        last = 0;
        adj.resize(2 * n);
        t[0].len = 0;
        t[0].link = -1;    // -1 means invalid ...which is only true for the root.
        t[0].firstpos = 0; //
        disSubstr.resize(2 * n, 1);
        disSubstr[0] = 0;
    }
    void extend(char c)
    {
        int p = last;
        if (t[p].nxt.count(c))
        {
            int q = t[p].nxt[c];
            if (t[q].len == t[p].len + 1)
            {
                last = q;
                return;
            }
            int clone = sz++;
            t[clone] = t[q];
            t[clone].len = t[p].len + 1;
            t[q].link = clone;
            last = clone;
            while (p != -1 && t[p].nxt[c] == q)
            {
                t[p].nxt[c] = clone;
                p = t[p].link;
            }
            return;
        }

        // the below code is only for a new node which came into existence for the first time
        // mane,dhoro ekta node, jeitar character age koknoi silo na tree te, tar jonno eita create hsse...

        int cur = sz++;
        t[cur].len = t[last].len + 1;
        t[cur].firstpos = t[cur].len;
        p = last;
        while (p != -1 && !t[p].nxt.count(c))
        {
            t[p].nxt[c] = cur;
            p = t[p].link;
        }
        if (p == -1) // etar mane ami emn kaw kei pailam na ,je ei node tar failure hoite pare, jdi emn kaw k paitme e, taile to r eikhane astam na,, taina???
            t[cur].link = 0;
        else
        {
            int q = t[p].nxt[c];
            if (t[p].len + 1 == t[q].len)
                t[cur].link = q;
            else
            {
                int clone = sz++;
                t[clone] = t[q];
                t[clone].len = t[p].len + 1;
                while (p != -1 && t[p].nxt[c] == q)
                {
                    t[p].nxt[c] = clone;
                    p = t[p].link;
                }
                t[q].link = t[cur].link = clone;
            }
        }
        last = cur;
    }
    void build_tree()
    {
        for (int i = 1; i < sz; i++)
            adj[t[i].link].push_back(i); //
    }
    void build(string &s)
    {
        for (auto x : s)
        {
            extend(x);
            terminal[last] = 1;
        }
        build_tree();
    }
    long long cnt(int i)
    { // number of times i-th node occurs in the string
        if (dp[i] != -1)
            return dp[i];
        long long ret = terminal[i];
        for (auto &x : adj[i])
            ret += cnt(x);
        return dp[i] = ret;
    }

    // https://cses.fi/problemset/task/2102
    bool find(string str)
    {
        int n = str.size();
        int root = 0;
        for (int i = 0; i < n; i++)
        {
            if (!t[root].nxt.count(str[i]))
                return false;
            root = t[root].nxt[str[i]];
        }
        return 1;
    }

    // https://cses.fi/problemset/task/2103
    int findIndex(string str)
    {
        int n = str.size();
        int root = 0;
        for (int i = 0; i < n; i++)
        {
            if (!t[root].nxt.count(str[i]))
                return 0;
            root = t[root].nxt[str[i]];
        }
        return cnt(root);
    }

    // https://cses.fi/problemset/task/2104/
    int findFirstPos(string str)
    {
        int n = str.size();
        int root = 0;
        for (int i = 0; i < n; i++)
        {
            if (!t[root].nxt.count(str[i]))
                return -1;
            root = t[root].nxt[str[i]];
        }
        // so, you are sure that the patter exists and now root is the on the last character of the pattern, calculate the first position of the first character and return it
        return t[root].firstpos - n + 1;
    }

    // DFS for counting distinct substring of the string
    // https://cses.fi/problemset/task/2105/
    void dfs(int u = 0)
    {
        if (u)
            disSubstr[u] = 1;
        for (int i = 0; i < 26; i++)
        {
            char ch = 'a' + i;
            if (t[u].nxt.count(ch) != 0)
            {
                auto v = t[u].nxt[ch];
                if (disSubstr[v] == -1)
                    dfs(v);
                disSubstr[u] += disSubstr[v];
            }
        }
    }


    //https://cses.fi/problemset/task/2108/
    // find the k-th lexicographically smallest substring.
    void findKthSubstr(string &result, int u, ll k)
    {
        if (k <= 0)
            return;
        for (int i = 0; i < 26; i++)
        {
            char ch = 'a' + i;
            if (t[u].nxt.count(ch) == 0)
                continue;
            int v = t[u].nxt[ch];
            if (disSubstr[v] < k)
                k -= disSubstr[v];
            else if (k > 0)
            {
                result.push_back(ch);
                findKthSubstr(result, v, k - 1);
                break;
            }
        }
    }
};

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    // cin >> t;
    while (t--)
    {
        string s;
        cin >> s;
        int n = s.size();
        SuffixAutomaton sa(n);
        sa.build(s);
        sa.dfs();
       // cout << sa.disSubstr[0] << endl;

        ll k;
        cin >> k;
        string res = "";
        sa.findKthSubstr(res, 0, k);

        cout << res << endl;
        
    }
    return 0;
}

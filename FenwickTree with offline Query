//https://cses.fi/problemset/task/1734/

#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

template <typename T>
using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define endl "\n";
typedef long long ll;
typedef vector<int> vi;

const int N = 3e5 + 9;

template <class T>
struct BIT
{ // 1-indexed
    int n;
    vector<T> t;
    BIT() {}
    BIT(int _n)
    {
        n = _n;
        t.assign(n + 1, 0);
    }
    T query(int i)
    {
        T ans = 0;
        for (; i >= 1; i -= (i & -i))
            ans += t[i];
        return ans;
    }
    void upd(int i, T val)
    {
        if (i <= 0)
            return;
        for (; i <= n; i += (i & -i))
            t[i] += val;
    }
    void upd(int l, int r, T val)
    {
        upd(l, val);
        upd(r + 1, -val);
    }
    T query(int l, int r)
    {
        return query(r) - query(l - 1);
    }
};
void solve()
{
    int n, q;
    cin >> n >> q;
    int a[n + 2];
    for (int i = 1; i <= n; i++)
        cin >> a[i];
    // BIT<int> seg = BIT<int>(n + 2);
    BIT<int> seg(n + 2);
    vector<pair<int, int>> saved[n + 2]; // I'd keep n index for tracking any query end at that index
    vector<int> ans(q + 2);
    for (int i = 1; i <= q; i++)
    {
        int l, r;
        cin >> l >> r;
        saved[r].push_back({l, i});
    }
    map<int, int> m; // for getting the index ....

    for (int i = 1; i <= n; i++)
    {
        // always keep track of the right most value, and delete the left most value ...
        if (m.find(a[i]) == m.end())
        {
            m[a[i]] = i;
        }
        else
        {
            seg.upd(m[a[i]], -1); // exists. so update the segment tree of that index by 0...
            m[a[i]] = i;
        }

        seg.upd(i, 1); // set this index 1 all the time , as you should keep the right most index....
                       // does any query ends at this index?

        if (saved[i].size() != 0)
        {
            for (int j = 0; j < saved[i].size(); j++)
            {

                int l = saved[i][j].first;
                int idx = saved[i][j].second;
                int r = i;
                ans[idx] = seg.query(l, r);
            }
        }
    }
    for (int i = 1; i <= q; i++)
        cout << ans[i] << endl;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1, cs = 1;
    // cin >> t;
    while (t--)
    {
        // cout<<"Case "<<cs++<<": ";
        solve();
    }
    return 0;
}

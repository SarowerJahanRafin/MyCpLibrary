/*
    you are given a string text ,
    where you have to find a pattern.
    and tell the number of occurance and their index;
*/

#include <bits/stdc++.h>
using namespace std;
#define endl "\n";
typedef long long ll;
typedef vector<int> vi;

const int N = 1e5 + 10;

vector<int> build_lps(string &pat)
{
    vector<int> lps(pat.size(), 0);
    int j = 0;
    for (int i = 1; i < pat.size();)
    {
        if (pat[i] == pat[j])
        {
            lps[i] = j + 1, i++, j++;
        }
        else
        {
            if (j != 0)
                j = lps[j - 1];
            else
                i++; // lps[i]=0 ei line ta na likhleo cholbe, ei case e j=0;
        }
    }
    return lps;
}

void kmp(string &text, string &pattern)
{
    vector<int> lps = build_lps(pattern);
    // for (auto x : lps)
    //     cout << x << ' ';
    // cout << endl;
    vector<int> found_idx;

    int i = 0, j = 0; //  i is for the text and j is for the pattern;
    while (i < text.size())
    {
        if (text[i] == pattern[j])
            i++, j++;

        else
        {
            if (j != 0)
                j = lps[j - 1];
            else
                i++;
        }

        if (j == pattern.size())
        {
            found_idx.push_back(i - pattern.size());
            j = lps[j - 1];
        }
    }

    // worked done. now check

    if (found_idx.empty())
        cout << "NOT FOUND\n";
    else
    {
        cout << found_idx.size() << endl;
        for (auto &x : found_idx)
            cout << x << ' ';
        cout << endl;
    }
}

void solve()
{
    string text, pattern;
    cin >> text >> pattern;
    kmp(text, pattern);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1, cs = 1;
    cin >> t;
    while (t--)
    {
        // cout<<"Case "<<cs++<<": ";
        solve();
    }
    return 0;
}
